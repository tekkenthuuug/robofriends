{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","components/MainPage.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CounterButton","count","color","onClick","PureComponent","Header","MainPage","filterRobots","filter","robot","toLowerCase","includes","searchField","onRequestRobots","onSearchChange","isPending","App","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.18202edc.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\treturn (\r\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t<div>\r\n\t\t\t\t<img alt=\"robots\" src={`https://robohash.org/${id}?size=200x200`} />\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{robots.map((user, i) => {\r\n\t\t\t\treturn <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />;\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n\treturn (\r\n\t\t<div className=\"pa2\">\r\n\t\t\t<input\r\n\t\t\t\taria-label=\"Search robots\"\r\n\t\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\"\r\n\t\t\t\ttype=\"search\"\r\n\t\t\t\tplaceholder=\"Search robots\"\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n\treturn <div style={{ overflowY: \"scroll\", border: \"1px solid black\", height: \"700px\" }}>{props.children}</div>;\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return (<h1>OoOops... Something went wrong!</h1>);\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { PureComponent } from 'react';\r\n\r\nclass CounterButton extends PureComponent {\r\n\tconstructor (props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = { count: 0 };\r\n\t}\r\n\r\n\trender () {\r\n\t\treturn (\r\n\t\t\t<button\r\n\t\t\t\tid=\"counter\"\r\n\t\t\t\tcolor={this.props.color}\r\n\t\t\t\tonClick={() => this.setState((state) => ({ count: state.count + 1 }))}\r\n\t\t\t>\r\n\t\t\t\tCount: {this.state.count}\r\n\t\t\t</button>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default CounterButton;\r\n","import React, { PureComponent } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\n// In most cases, instead of writing shouldComponentUpdate()\r\n// by hand, you can inherit from React.PureComponent. It is\r\n// equivalent to implementing shouldComponentUpdate() with a\r\n// shallow comparison of current and previous props and state.\r\n\r\nclass Header extends PureComponent {\r\n\trender () {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1 className=\"f1\">RoboFriends</h1>\r\n\t\t\t\t<CounterButton />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport Header from '../components/Header';\r\nimport './MainPage.css';\r\n\r\nclass MainPage extends Component {\r\n\tcomponentDidMount () {\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\tfilterRobots = () => {\r\n\t\treturn this.props.robots.filter((robot) => {\r\n\t\t\treturn robot.name.toLowerCase().includes(this.props.searchField.toLowerCase());\r\n\t\t});\r\n\t};\r\n\r\n\trender () {\r\n\t\tconst { onSearchChange, isPending } = this.props;\r\n\t\tif (isPending) {\r\n\t\t\treturn <h1 className=\"tc\">Loading...</h1>;\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"tc\">\r\n\t\t\t\t\t<Header />\r\n\t\t\t\t\t<SearchBox searchChange={onSearchChange} />\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t\t<CardList robots={this.filterRobots()} />\r\n\t\t\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default MainPage;\r\n","import React, { Component } from 'react';\r\nimport MainPage from '../components/MainPage';\r\nimport { setSearchField, requestRobots } from '../actions';\r\nimport { connect } from 'react-redux';\r\nimport './App.css';\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tsearchField : state.searchRobots.searchField,\r\n\t\trobots      : state.requestRobots.robots,\r\n\t\tisPending   : state.requestRobots.isPending,\r\n\t\terror       : state.requestRobots.error\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange  : (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots : () => dispatch(requestRobots())\r\n\t};\r\n};\r\n\r\nclass App extends Component {\r\n\trender () {\r\n\t\treturn <MainPage {...this.props} />;\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype    : CHANGE_SEARCH_FIELD,\r\n\tpayload : text\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\r\n\tfetch(\"https://jsonplaceholder.typicode.com/users\")\r\n\t\t.then((response) => response.json())\r\n\t\t.then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n\t\t.catch((error) => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\r\n};\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_FAILED,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: \"\"\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: \"\"\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        robots: action.payload,\r\n        isPending: false\r\n      });\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {\r\n        error: action.payload,\r\n        isPending: false\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport \"./index.css\";\r\nimport App from \"./containers/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport \"tachyons\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nimport { searchRobots, requestRobots } from \"./reducers\";\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App />\r\n\t</Provider>,\r\n\tdocument.getElementById(\"root\")\r\n);\r\nserviceWorker.register();\r\n"],"sourceRoot":""}